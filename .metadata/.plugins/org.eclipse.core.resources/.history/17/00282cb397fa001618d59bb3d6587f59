package lab3;

import java.util.Scanner;

public class quickSort
{
    private static void quickSort(int lowBoundary, int highBoundary, int[] ar)
    {
        //Set scanRight and scanLeft as lowBoundary and highBoundary of current partition
        int scanRight = lowBoundary, scanLeft = highBoundary;
 
        //Set the pivot as the middle value of the current partition
        int pivot = ar[lowBoundary + (highBoundary - lowBoundary) / 2];
 
        //Run until both scans meet
        while (scanRight <= scanLeft)
        {
            //Shrink unsorted scanRight partition while the current element of the right scan is smaller than pivot
            while (ar[scanRight] < pivot)
            {
                scanRight++;
            }
 
            //Shrink unsorted scanLeft partition while the current element of the left scan is greater than the pivot
            while (ar[scanLeft] > pivot)
            {
                scanLeft--;
            }
 
            //If scanRight is still less than scanLeft swap the unsorted elements and update scanRight and scanLeft
            if (scanRight <= scanLeft)
            {
                int temp = ar[scanRight];
                ar[scanRight] = ar[scanLeft];
                ar[scanLeft] = temp;
 
                scanRight++;
                scanLeft--;
            }
        }
 
        //Recursively sort the upper partition until its completely sorted
        if (lowBoundary < scanLeft) {
            quickSort(lowBoundary, scanLeft, ar);
        }
 
        //Do the same for the lower partition
        if (highBoundary > scanRight)
        {
            quickSort(scanRight, highBoundary, ar);
        }
    }
 
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] ar = new int[n];
 
        for (int i = 0; i < n; i++)
        {
            ar[i] = sc.nextInt();
        }
 
        quickSort(0, ar.length - 1, ar);
 
        for (int i = 0; i < n; i++)
        {
            if (i % 20 == 0) System.out.println();
            System.out.print(ar[i] + " ");
        }
    }
}